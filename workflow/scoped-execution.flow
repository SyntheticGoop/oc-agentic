# Planner Workflow State Machine

: Do immediately
* to initial_loaded:
  Call `planner_get_project` to load current scope of work.
  List summary of files changed with `jj diff --summary -r @`
  Wait for scope of work.
  Display current scope of work status to the user.

: Ask: Do you want to continue the scope of work?
initial_loaded to refine_tasks

: Ask: Do you want to start a new scope of work?
initial_loaded to define_project:
  Ask to define the specifics of the scope of work.
  These specifics will be used to fulfill the arguments to `planner_create_project`.
  Detail the specifics.

: Do immediately
define_project to refine_project:
  Synthesize the scope of work specifics.
  Pass the scope of work specifics to agent `oc-agentic-inquisitor`.
  Your message format will be `[requirements] This needs clarity how plans will be formed during execution. Plans that derive from this must be strictly deterministic [specification] THE_PROJECT_SPECIFICATION`.
  THE_SCOPE_OF_WORK_SPECIFICATION is the contents of the scope of work specifics you would have passed to `planner_create_project`.
  Wait for reply from `oc-agentic-inquisitor`.
  Perform secondary research on any questions raised.
  You may use `oc-agentic-investigator` to research about any concerns, in parallel, that deal directly with the codebase.
  `oc-agentic-investigator` should be called with the following format: `I am uncertain about these THE_POINT. This is my current assumption THE_ASSUMPTION. Here is the CONTEXT. This is were I would begin: INVESTIGATION_ENTRY_POINT. Can you help provide factual clarity?`.
  Use your enhanced contextual understanding and ability to investigate to immediately reject or accept points, synthesizing new points, or making any other adjustments to the project, leaving points with uncertainty as an exercise to the user to clarify.
  Present the scope of work specifics with updated points.

: Ask: Can you provide clarity on all the above points?
refine_project to refine_project

: Ask: Would you like to proceed (anyway) to creating the scope of work?
refine_project to create_project:
  Call `planner_create_project` with the final synthesized project specifics from all the clarifications.
  Wait for successful reply.

: Do immediately
create_project to refine_tasks:
  Get current scope of work with `planner_get_project`.
  Display current tasks.

: Ask: Is there a task you want to alter? What are the details?
refine_tasks to check_tasks:
  Format input for `planner_update_task` and pass ONLY THAT INPUT to `oc-agentic-inquisitor`.
  Your message format will be `[requirements] This needs clarity how execution will be carried out. Execution on this task must be strictly deterministic [specification] THE_TASK_SPECIFICATION`.
  Perform secondary research on any questions raised.
  You may use `oc-agentic-investigator` to research about any concerns, in parallel, that deal directly with the codebase.
  `oc-agentic-investigator` should be called with the following format: `I am uncertain about these THE_POINT. This is my current assumption THE_ASSUMPTION. Here is the CONTEXT. This is were I would begin: INVESTIGATION_ENTRY_POINT. Can you help provide factual clarity?`.
  Use your enhanced contextual understanding and ability to investigate to immediately reject or accept points, synthesizing new points, or making any other adjustments to the scope of work, leaving points with uncertainty as an exercise to the user to clarify.
  Present reply and interrogate them with the response questions.

: Ask: Can you provide clarity on all the above points
check_tasks to check_tasks

: Ask: Would you like to proceed (anyway) to updating the task?
check_tasks to update_task:
  Pass input to `planner_update_task`.
  Wait for reply.

: Do immediately
update_task to refine_tasks

: Ask: Would you like to delete a specific task or tasks?
refine_tasks to delete_task:
  Call `planner_delete_task` to delete task in question.
  Wait for reply.

delete_task to refine_tasks

: Ask: Would you like to reorder specific tasks?
refine_tasks to reorder_tasks:
  Call `planner_reorder_tasks` to reorder tasks.
  Wait for reply.

: Do immediately
reorder_tasks to refine_tasks

: Ask: Would you like to proceed to do a final check?
refine_tasks to final_check:
  NEVER SKIP THIS EVEN IF IT WAS DONE BEFORE. QUESTIONS CAN CHANGE.
  Get full scope of work state with `planner_get_project`.
  Format output of `planner_get_project` and pass ONLY THAT INPUT to `oc-agentic-inquisitor`.
  Your message format will be `[requirements] This is a full scope of work. Every part needs to be internally coherent and logically sound. Each part must build up to a cohesive whole and no contradictions are allowed. Work done must be atomic. Planning must be exhaustive. [specification] THE_SCOPE_OF_WORK_SPECIFICATION`.
  Wait for reply from `oc-agentic-inquisitor`.
  You may use `oc-agentic-investigator` to research about any concerns, in parallel, that deal directly with the codebase.
  `oc-agentic-investigator` should be called with the following format: `I am uncertain about these THE_POINT. This is my current assumption THE_ASSUMPTION. Here is the CONTEXT. This is were I would begin: INVESTIGATION_ENTRY_POINT. Can you help provide factual clarity?`.
  Use your enhanced contextual understanding and ability to investigate to immediately reject or accept points, synthesizing new points, or making any other adjustments to the scope of work, leaving points with uncertainty as an exercise to the user to clarify.
  Present the synthesized full scope of work to the user, leaving no details out.

: Ask: Do you accept these changes as the full scope of work??
final_check to parallel_update:
  Update any scope with any points that the user clarifies.
  Commit these changes in project with `planner_update_project`
  Commit these changes in tasks with `planner_update_task`
  Commit these changes in task order with `planner_reoder_tasks`
  Commit these changes in task deletion with `planner_delete_task`

: Do immediately
parallel_update to final_check

: Ask: Do want to continue on?
final_check to execution:
  Update any scope with any points that the user clarifies.
  Commit these changes in project with `planner_update_project`
  Commit these changes in tasks with `planner_update_task`
  Commit these changes in task order with `planner_reoder_tasks`
  Commit these changes in task deletion with `planner_delete_task`
  Call `planner_get_project` to get full project details.

: Do immediately
execution to loop_tasks:
  Find first unfinished task.
  Go to first incomplete task with `planner_goto`.
  Extract all current task details from `planner_get_project`.

: Introspect: Has unfinished task.
loop_tasks to run_task:
  Pass the task to `oc-agentic-executor`.
  Your message format will be `Do TASK_DETAILS` where TASK_DETAILS is the full specification of the current active task verbatim.
  Wait for execution to complete.
  Pass the task to `oc-agentic-reiviewer`.
  Your message format will be `Based on TASK_DETAILS review the current changes as reported by EXECUTION_REVIEW` where TASK_DETAILS is the full specification of the current active task verbatim and EXECUTION_REVIEW is the output produced by the executor.
  Wait for review to complete.

: Introspect: Task is complete. IMPORTANT: THIS IS STRICT 100% COMPLETION. YOU ARE NOT ALLOWED TO BYPASS THIS REQUIREMENT. DOING SO WILL CAUSE SERIOUS PROGRAM CORRUPTION.
run_task to mark_task:
  Synthesize current task specification with actual work done to produce updated task.
  Be precise with your editing.
  Call `planner_update_task` to update the task as completed with new details.

: Do immediately
mark_task to loop_tasks

: Introspect: Task not yet successfully completed.
run_task to redefine_task:
  Generate new sub plan that would satisfy task requirements. 
  Format sub plan for `planner_update_task` and pass ONLY THAT INPUT to `oc-agentic-inquisitor`.
  Your message format will be `[requirements] This needs clarity how execution will be carried out. Execution on this task must be strictly deterministic [specification] THE_TASK_SPECIFICATION`.
  Perform secondary research on any questions raised.
  You may use `oc-agentic-investigator` to research about any concerns, in parallel, that deal directly with the codebase.
  `oc-agentic-investigator` should be called with the following format: `I am uncertain about these THE_POINT. This is my current assumption THE_ASSUMPTION. Here is the CONTEXT. This is were I would begin: INVESTIGATION_ENTRY_POINT. Can you help provide factual clarity?`.
  Use your enhanced contextual understanding and ability to investigate to immediately reject or accept points, synthesizing new points, or making any other adjustments to the scope of work. Ensure that your plan remains within the constraints of the sub problems to solve.
  This synthesized scope of work MUST contain the following:
  1. It must contain all the work already done. These tasks should be classified as tasks that must be evaluated and reattempted if the evaluation failed. Evaluation means ensuring that the task is actually complete.
  2. It must append all the new tasks that must be completed.
  3. It must not drop uncompleted tasks from the current main task. Those must still be enforced.

: Do immediately
redefine_task to run_task

: Introspect: All tasks complete
loop_tasks to all_tasks_complete:
  Call `planner_get_project` to get full project details.
  Present reply to user

: User is satisfied with output
all_tasks_complete to initial_loaded

: User is unsatisfied with output
all_tasks_complete to refine_tasks

